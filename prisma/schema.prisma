generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionUsers SessionUser[]
  messages     Message[]

  accounts     Account[]
  sessions     Session[]
}

model Room {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionUsers SessionUser[]
  messages     Message[]
}

model SessionUser {
  id          String   @id @default(cuid())
  userId      String
  roomId      String
  displayName String
  joinedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  messages Message[]

  @@unique([userId, roomId])
}

model Message {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  roomId        String
  sessionUserId String
  userId        String?

  room         Room         @relation(fields: [roomId], references: [id])
  sessionUser  SessionUser  @relation(fields: [sessionUserId], references: [id])
  User         User?        @relation(fields: [userId], references: [id])
}

//
// ðŸ‘‡ BetterAuth Required Models
//

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expiresAt  BigInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
